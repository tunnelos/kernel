#pragma once
#include "./api_definitions.h"

void (* __api_init)();
const char *(*__arch_getarch)();
const char *(* __arch_getenvironment)();
void (* __avx_init)();
int (* digitcount)(unsigned int num);
int (* __cmos_getUpdate)();
unsigned char (* __cmos_getRTCreg)(unsigned char reg);
void (* __cmos_getRTC)();
void (* __cmos_read)(unsigned char *data_array);
void (* __coreshell_init_coreRenderer)();
void (* __coreshell_init_coreIOHandler)();
void (* __coreshell_init_coreExecuter)();
void (* __coreshell_install_stage1)();
void (* __coreshell_install_stage2)();
void (* __coreshell_install_stage3)();
coreshell_hddsettings_t *(* __coreshell_createSettings)();
vector2d_t (* alignText)(const char *text);
void (* __gui_drawRectangle)(vector2d_t pos, vector2d_t size, int color);
void (* __gui_drawInputBar)(vector2d_t pos, const char *buffer, int maxSymbols);
void (* __gui_drawProgressBar)(vector2d_t pos, vector2d_t maxSize, int percentage, int color);
void (* __gui_drawImage24)(BMPImage *image, vector2d_t pos);
void (* __gui_drawImage32)(BMPImage *image, vector2d_t pos);
void (* __coreshell_init_all)();
void (* __coreshell_onDesktop)(coreshell_user_t *user);
void (* __coreshell_loginscreen)();
void (* cpptest_test00)();
int (* __cpuid_check_sse)();
int (* __cpuid_check_avx)();
int (* __cpuid_check_avx2)();
int (* __cpuid_check_avx512)();
int (* strlen)(const char *str);
char *(* tolower)(char *data);
char (* tolowerchar)(char data);
int (* strncmp)(const char *s1, const char *s2, size_t n);
int (* strcmp)(const char *s1, const char *s2);
char *(* strcpy)(char *dest, const char *src);
char *(* strchr)(const char *s, char c);
char *(* strrchr)(const char *s, char c);
double (* strtod)(const char *nptr, char **endptr);
char *(* strcat)(char *dest, const char *src);
char *(* strncat)(char *dest, const char *src, size_t n);
void (* __desktop_add_task)(string task);
void (* __desktop_terminate_task)(string task);
void (* __desktop_render_tasks)();
int (* __desktop_get_current_tasks)();
void (* __desktop_init)();
void (* __encoder_fill_chartable)();
uint16_t *(* __encoder_ascii2ct)(const char *data);
bool (* __fpu_check)();
void *(* __fs_makeSectorAction)(int sID, int sSize, void *buffer, enum SectorAction action, uint8_t drive);
bool (* __fs_tunnelFindFS)(uint8_t drive);
tunnelfs_t (* __fs_tunnelCreateFS)(int *percentage, uint8_t drive);
int (* __fs_tunnelFindFileMeta)(char *name, char *extension, tunnelfs_t fsInstance);
uint8_t *(* __fs_tunnelReadDataFromMeta)(int id, tunnelfs_t fsInstance);
int (* __fs_tunnelAllocateFile)(char *name, char *extension, int sSize, tunnelfs_t fsInstance);
void (* __fs_tunnelFreeFile)(int fID, tunnelfs_t fsInstance);
void (* __fs_tunnelSaveFile)(int fID, uint8_t *buffer, tunnelfs_t fsInstance);
bool (* __fs_readFATCheck)(uint8_t drive);
enum FATType (* __fs_getFATType)(uint8_t drive);
halcategory_t *(* __hal_newcategory)(halmember_t *members, const char *name);
halmember_t   *(* __hal_newmember)  (unitype_t *functions, unitype_t *variables, const char *name);
void (* __ide_init)(uint32_t *bars);
uint8_t (* __ide_read)(uint8_t channel, uint8_t reg);
void (* __ide_write)(uint8_t channel, uint8_t reg, uint8_t data);
void (* __ide_read_buffer)(uint8_t channel, uint8_t reg, uint32_t *buffer, uint32_t quads);
uint8_t (* __ide_polling)(uint8_t channel, bool advanced);
void (* __ide_error)(uint32_t drive, uint8_t err);
void (* __ide_get_access)(ide_rw_t data);
void (* __idt_exception_handler)(int interrupt_id);
void (* __idt_interrupt_handler)(int interrupt_id);
void (* __idt_set_descriptor)(uint8_t vector, void *isr, uint8_t flags);
void (* __idt_init)();
void (* __cli)();
void (* __sti)();
bool (* __keyboard_ps2_init)();
void (* __keyboard_ps2_append_cin)(char c);
void (* _start)();
void (* __main_core0init)();
int (* abs)(int i);
double (* fabs)(double x);
float (* acos)(float x);
int (* pow)(int x, int y);
int (* floor)(float x);
float (* round)(float number);
float (* sqrt)(float number);
float (* modf)(float x, float *iptr);
float (* acos)(float x);
void *(* memcpy)(void *dest, const void *src, size_t n);
void (* memset)(void *dest, int c, size_t n);
void (* __mm_fillblocks)();
int (* __mm_findoffset)(int blocks);
void *(* malloc)(size_t size);
void *(* calloc)(size_t size);
void (* free)(void *address);
tunnel_memory_block_t (* __mm_get_blockinformation)(void *address);
void *(* realloc)(void *address, size_t size);
void (* __network_init)();
void (* __nmi_init)();
void (* __nmi_disable)();
const char *(* pcb)(bool j);
void (* crash)(const char *str, uint16_t id, bool interrupt);
void (* __pic_eoi)(uint8_t irq);
void (* __pic_remap)(int *offset);
extern void (* __pic_disable)();
void (* __pic_mask)(uint8_t irq);
void (* __pic_unmask)(uint8_t irq);
uint16_t (* __pic_get_irq_reg)(int ocw3);
uint16_t (* __pic_get_irr)();
uint16_t (* __pic_get_isr)();
void (* __pit_event_timer)();
uint16_t (* __pit_count)();
void (* __pit_set_count)(uint16_t count);
void (* __pit_init)();
void (* __pit_eoi)();
void (* __placeholder_init)();
unitype_t *(* __placeholder_unitype)(unitype_t *args);
void (* __rtc_init)();
bool (* __serial_init)();
int (* __serial_got_signal)();
char (* __serial_read)();
int (* __serial_transmit_check)();
void (* __serial_write_char)(char a);
void (* __serial_write_raw)(const char *data, uint64_t size);
void (* __serial_write_fmt)(const char *fmt, ...);
int *(* __sort_counting)(int *data, int size);
void (* __sse_init)();
void (* __sse_save)();
unsigned char * (* stb_csample_uint8)(unsigned char *src, int channels, int stride, int width, int height, int x, int y);
int * (* stb_csample_int)(int *src, int channels, int stride, int width, int height, int x, int y);
float * (* stb_csample_float)(float *src, int channels, int stride, int width, int height, int x, int y);
void (* stb_bilerp_uint8)(unsigned char *src, int stride, int width, int height, float x, float y);
void (* stb_bilerp_uint8_3)(unsigned char *src, int stride, int width, int height, float x, float y);
void (* stb_bilerp_uint8_4)(unsigned char *src, int stride, int width, int height, float x, float y);
void (* stb_bilerp_float)(float *src, int stride, int width, int height, float x, float y);
void (* stb_bilerp_float_3)(float *src, int stride, int width, int height, float x, float y);
void (* stb_bilerp_int)(int *src, int stride, int width, int height, float x, float y);
void (* puts)(const char *str, uint32_t color, int x, int y);
void (* putc)(const char c, uint32_t color, int x, int y);
int (* sprintf)(char *str, const char *fmt, ...);
void (* puts_gui)(const char *str, uint32_t color, int x, int y);
void (* putc_gui)(const char c, uint32_t color, int x, int y);
void (* printf)(uint32_t color, int x, int y, const char *fmt, ...);
char *(* itoa)(int num, char *buffer, int base, int x, int y, int color, bool use_additional);
char *(* itoalong)(uint64_t num, char *buffer, int base, int x, int y, int color, bool use_additional);
char (* itoh)(int num, bool upper, int x, int y, int color, bool use_additional);
char (* itoc)(int num);
char* (* strrev)(char* src);
void (* srand)(int seed);
int (* rand)();
int (* TUNNEL_RANDOM)();
void (* __systemconf_init)();
void (* __test_unitest)();
uint8_t (* inb)(uint16_t port);
uint16_t (* inw)(uint16_t port);
uint32_t (* inl)(uint16_t port);
void (* outb)(uint16_t port, uint8_t val);
void (* outw)(uint16_t port, uint16_t val);
void (* outl)(uint16_t port, uint32_t val);
void (* io_wait)(void);
void (* wait)(uint64_t ms);
void (* wait_ns)(uint128_t ns);
void (* insl)(uint16_t reg, uint32_t *buffer, int quads);
int (* __tools_get_cpu)();
void (* __tools_int_test)(uint8_t interrupt_number);
void (* __tu   nnel_shutdown)();
void (* __tunnel_reboot)();
void (* push)(int x);
int (* pop)();
unitype_t *(* __uni_create)(const char *variable_template);
void (* __uni_delete)(unitype_t *args);
unitype_t *(* __uni_find)(unitype_t *args, const char *name);
float (* floorf)(float x);
double (* floord)(double x);
long double (* floorl)(long double x);
long double (* __floattixf)(int128_t a);
int128_t (* __fixxfti)(long double a);
void (*__hlt)();
int (*__read_error_code)();
uint8_t *(*__get_stack)();

typedef void (*voidf)();

inline void __api_setValues() {
    *(voidf*)&__api_init = (voidf)0xffffffffffe04dfa;
    *(voidf*)&__arch_getarch = (voidf)0;
    *(voidf*)&__arch_getenvironment = (voidf)0;
    *(voidf*)&__avx_init = (voidf)0xffffffffffe09200;
    *(voidf*)&digitcount = (voidf)0xffffffffffe040ce;
    *(voidf*)&__cmos_getUpdate = (voidf)0xffffffffffe09228;
    *(voidf*)&__cmos_getRTCreg = (voidf)0xffffffffffe09253;
    *(voidf*)&__cmos_getRTC = (voidf)0xffffffffffe09280;
    *(voidf*)&__cmos_read = (voidf)0xffffffffffe094df;
    *(voidf*)&__coreshell_init_coreRenderer = (voidf)0xffffffffffe08eb1;
    *(voidf*)&__coreshell_init_coreIOHandler = (voidf)0xffffffffffe08e0a;
    *(voidf*)&__coreshell_init_coreExecuter = (voidf)0xffffffffffe08d5a;
    *(voidf*)&__coreshell_install_stage1 = (voidf)0xffffffffffe0881d;
    *(voidf*)&__coreshell_install_stage2 = (voidf)0xffffffffffe08812;
    *(voidf*)&__coreshell_install_stage3 = (voidf)0xffffffffffe08807;
    *(voidf*)&__coreshell_createSettings = (voidf)0xffffffffffe08355;
    *(voidf*)&alignText = (voidf)0xffffffffffe083e4;
    *(voidf*)&__gui_drawRectangle = (voidf)0xffffffffffe08465;
    *(voidf*)&__gui_drawInputBar = (voidf)0xffffffffffe0855c;
    *(voidf*)&__gui_drawProgressBar = (voidf)0xffffffffffe084d9;
    *(voidf*)&__gui_drawImage24 = (voidf)0xffffffffffe0860f;
    *(voidf*)&__gui_drawImage32 = (voidf)0xffffffffffe0874f;
    *(voidf*)&__coreshell_init_all = (voidf)0xffffffffffe08f29;
    *(voidf*)&__coreshell_onDesktop = (voidf)0xffffffffffe08d3c;
    *(voidf*)&__coreshell_loginscreen = (voidf)0xffffffffffe08d4f;
    *(voidf*)&cpptest_test00 = (voidf)0xffffffffffe0902b;
    *(voidf*)&__cpuid_check_sse = (voidf)0xffffffffffe09145;
    *(voidf*)&__cpuid_check_avx = (voidf)0xffffffffffe0916b;
    *(voidf*)&__cpuid_check_avx2 = (voidf)0xffffffffffe09191;
    *(voidf*)&__cpuid_check_avx512 = (voidf)0xffffffffffe091b7;
    *(voidf*)&strlen = (voidf)0xffffffffffe03abf;
    *(voidf*)&tolower = (voidf)0xffffffffffe03b3e;
    *(voidf*)&tolowerchar = (voidf)0xffffffffffe03b20;
    *(voidf*)&strncmp = (voidf)0xffffffffffe03e73;
    *(voidf*)&strcmp = (voidf)0xffffffffffe03fcf;
    *(voidf*)&strcpy = (voidf)0xffffffffffe03ed2;
    *(voidf*)&strchr = (voidf)0xffffffffffe03f0a;
    *(voidf*)&strrchr = (voidf)0xffffffffffe03f68;
    *(voidf*)&strtod = (voidf)0xffffffffffe03bc0;
    *(voidf*)&strcat = (voidf)0xffffffffffe04096;
    *(voidf*)&strncat = (voidf)0xffffffffffe04007;
    *(voidf*)&__desktop_add_task = (voidf)0xffffffffffe09b44;
    *(voidf*)&__desktop_terminate_task = (voidf)0xffffffffffe09b93;
    *(voidf*)&__desktop_render_tasks = (voidf)0xffffffffffe09bbb;
    *(voidf*)&__desktop_get_current_tasks = (voidf)0;
    *(voidf*)&__desktop_init = (voidf)0xffffffffffe099f0;
    *(voidf*)&__encoder_fill_chartable = (voidf)0xffffffffffe0a24c;
    *(voidf*)&__encoder_ascii2ct = (voidf)0xffffffffffe0a1bd;
    *(voidf*)&__fpu_check = (voidf)0xffffffffffe08334;
    *(voidf*)&__fs_makeSectorAction = (voidf)0xffffffffffe05008;
    *(voidf*)&__fs_tunnelFindFS = (voidf)0xffffffffffe05093;
    *(voidf*)&__fs_tunnelCreateFS = (voidf)0xffffffffffe05147;
    *(voidf*)&__fs_tunnelFindFileMeta = (voidf)0xffffffffffe05381;
    *(voidf*)&__fs_tunnelReadDataFromMeta = (voidf)0xffffffffffe054b7;
    *(voidf*)&__fs_tunnelAllocateFile = (voidf)0xffffffffffe055af;
    *(voidf*)&__fs_tunnelFreeFile = (voidf)0xffffffffffe05832;
    *(voidf*)&__fs_tunnelSaveFile = (voidf)0xffffffffffe0599e;
    *(voidf*)&__fs_readFATCheck = (voidf)0xffffffffffe04e05;
    *(voidf*)&__fs_getFATType = (voidf)0xffffffffffe04e9a;
    *(voidf*)&__hal_newcategory = (voidf)0;
    *(voidf*)&__hal_newmember = (voidf)0;
    *(voidf*)&__ide_init = (voidf)0xffffffffffe06f3f;
    *(voidf*)&__ide_read = (voidf)0xffffffffffe07761;
    *(voidf*)&__ide_write = (voidf)0xffffffffffe07872;
    *(voidf*)&__ide_read_buffer = (voidf)0xffffffffffe07980;
    *(voidf*)&__ide_polling = (voidf)0xffffffffffe07a9f;
    *(voidf*)&__ide_error = (voidf)0xffffffffffe07b46;
    *(voidf*)&__ide_get_access = (voidf)0xffffffffffe07d52;
    *(voidf*)&__idt_exception_handler = (voidf)0xffffffffffe065cb;
    *(voidf*)&__idt_interrupt_handler = (voidf)0xffffffffffe066c7;
    *(voidf*)&__idt_set_descriptor = (voidf)0xffffffffffe0680c;
    *(voidf*)&__idt_init = (voidf)0xffffffffffe0689e;
    *(voidf*)&__cli = (voidf)0xffffffffffe09e20;
    *(voidf*)&__sti = (voidf)0xffffffffffe09e22;
    *(voidf*)&__keyboard_ps2_init = (voidf)0xffffffffffe05b4d;
    *(voidf*)&__keyboard_ps2_append_cin = (voidf)0xffffffffffe05b6c;
    *(voidf*)&_start = (voidf)0xffffffffffe02000;
    *(voidf*)&__main_core0init = (voidf)0xffffffffffe023ff;
    *(voidf*)&abs = (voidf)0xffffffffffe095cd;
    *(voidf*)&fabs = (voidf)0xffffffffffe095e9;
    *(voidf*)&acos = (voidf)0xffffffffffe096d5;
    *(voidf*)&pow = (voidf)0xffffffffffe09803;
    *(voidf*)&floor = (voidf)0xffffffffffe0984e;
    *(voidf*)&round = (voidf)0xffffffffffe0966b;
    *(voidf*)&sqrt = (voidf)0xffffffffffe0960d;
    *(voidf*)&modf = (voidf)0xffffffffffe098e2;
    *(voidf*)&acos = (voidf)0xffffffffffe096d5;
    *(voidf*)&memcpy = (voidf)0xffffffffffe04566;
    *(voidf*)&memset = (voidf)0xffffffffffe045c8;
    *(voidf*)&__mm_fillblocks = (voidf)0xffffffffffe04622;
    *(voidf*)&__mm_findoffset = (voidf)0xffffffffffe0470e;
    *(voidf*)&malloc = (voidf)0xffffffffffe04812;
    *(voidf*)&calloc = (voidf)0xffffffffffe047d7;
    *(voidf*)&free = (voidf)0xffffffffffe04bde;
    *(voidf*)&__mm_get_blockinformation = (voidf)0xffffffffffe049cc;
    *(voidf*)&realloc = (voidf)0xffffffffffe04af6;
    *(voidf*)&__network_init = (voidf)0xffffffffffe09134;
    *(voidf*)&__nmi_init = (voidf)0xffffffffffe04d98;
    *(voidf*)&__nmi_disable = (voidf)0xffffffffffe04dc9;
    *(voidf*)&pcb = (voidf)0xffffffffffe0410d;
    *(voidf*)&crash = (voidf)0xffffffffffe04136;
    *(voidf*)&__pic_eoi = (voidf)0xffffffffffe09f40;
    *(voidf*)&__pic_remap = (voidf)0xffffffffffe09f78;
    *(voidf*)&__pic_disable = (voidf)0xffffffffffe09e50;
    *(voidf*)&__pic_mask = (voidf)0xffffffffffe0a075;
    *(voidf*)&__pic_unmask = (voidf)0xffffffffffe0a0d3;
    *(voidf*)&__pic_get_irq_reg = (voidf)0xffffffffffe0a134;
    *(voidf*)&__pic_get_irr = (voidf)0xffffffffffe0a195;
    *(voidf*)&__pic_get_isr = (voidf)0xffffffffffe0a1a9;
    *(voidf*)&__pit_event_timer = (voidf)0xffffffffffe06f11;
    *(voidf*)&__pit_count = (voidf)0xffffffffffe06e70;
    *(voidf*)&__pit_set_count = (voidf)0xffffffffffe06ec8;
    *(voidf*)&__pit_init = (voidf)0xffffffffffe09c7f;
    *(voidf*)&__pit_eoi = (voidf)0xffffffffffe09e2e;
    *(voidf*)&__placeholder_init = (voidf)0xffffffffffe11db6;
    *(voidf*)&__placeholder_unitype = (voidf)0xffffffffffe11dc1;
    *(voidf*)&__rtc_init = (voidf)0xffffffffffe09e57;
    *(voidf*)&__serial_init = (voidf)0;
    *(voidf*)&__serial_got_signal = (voidf)0xffffffffffe05dd9;
    *(voidf*)&__serial_read = (voidf)0xffffffffffe05df3;
    *(voidf*)&__serial_transmit_check = (voidf)0xffffffffffe05e16;
    *(voidf*)&__serial_write_char = (voidf)0xffffffffffe05e30;
    *(voidf*)&__serial_write_raw = (voidf)0xffffffffffe05e66;
    *(voidf*)&__serial_write_fmt = (voidf)0xffffffffffe05ed1;
    *(voidf*)&__sort_counting = (voidf)0xffffffffffe0a257;
    *(voidf*)&__sse_init = (voidf)0xffffffffffe091e0;
    *(voidf*)&__sse_save = (voidf)0xffffffffffe09213;
    *(voidf*)&stb_csample_uint8 = (voidf)0xffffffffffe10fba;
    *(voidf*)&stb_csample_int = (voidf)0xffffffffffe11059;
    *(voidf*)&stb_csample_float = (voidf)0xffffffffffe11106;
    *(voidf*)&stb_bilerp_uint8 = (voidf)0xffffffffffe111b3;
    *(voidf*)&stb_bilerp_uint8_3 = (voidf)0xffffffffffe1138e;
    *(voidf*)&stb_bilerp_uint8_4 = (voidf)0xffffffffffe115b6;
    *(voidf*)&stb_bilerp_float = (voidf)0xffffffffffe117d8;
    *(voidf*)&stb_bilerp_float_3 = (voidf)0xffffffffffe119b7;
    *(voidf*)&stb_bilerp_int = (voidf)0xffffffffffe11be5;
    *(voidf*)&puts = (voidf)0xffffffffffe0246f;
    *(voidf*)&putc = (voidf)0xffffffffffe02686;
    *(voidf*)&sprintf = (voidf)0xffffffffffe02b37;
    *(voidf*)&puts_gui = (voidf)0xffffffffffe026c3;
    *(voidf*)&putc_gui = (voidf)0xffffffffffe02903;
    *(voidf*)&printf = (voidf)0xffffffffffe031e5;
    *(voidf*)&itoa = (voidf)0xffffffffffe02940;
    *(voidf*)&itoalong = (voidf)0xffffffffffe02a28;
    *(voidf*)&itoh = (voidf)0xffffffffffe038fa;
    *(voidf*)&itoc = (voidf)0xffffffffffe03957;
    *(voidf*)&strrev = (voidf)0xffffffffffe0396e;
    *(voidf*)&srand = (voidf)0xffffffffffe09ede;
    *(voidf*)&rand = (voidf)0xffffffffffe09efc;
    *(voidf*)&TUNNEL_RANDOM = (voidf)0xffffffffffe10870;
    *(voidf*)&__systemconf_init = (voidf)0xffffffffffe10865;
    *(voidf*)&__test_unitest = (voidf)0xffffffffffe0955a;
    *(voidf*)&inb = (voidf)0xffffffffffe05baa;
    *(voidf*)&inw = (voidf)0xffffffffffe05bcc;
    *(voidf*)&inl = (voidf)0xffffffffffe05bf0;
    *(voidf*)&outb = (voidf)0xffffffffffe05c11;
    *(voidf*)&outw = (voidf)0xffffffffffe05c36;
    *(voidf*)&outl = (voidf)0xffffffffffe05c5b;
    *(voidf*)&io_wait = (voidf)0xffffffffffe05cad;
    *(voidf*)&wait = (voidf)0xffffffffffe05cc7;
    *(voidf*)&wait_ns = (voidf)0xffffffffffe05d28;
    *(voidf*)&insl = (voidf)0xffffffffffe05d7e;
    *(voidf*)&__tools_get_cpu = (voidf)0xffffffffffe05c7b;
    *(voidf*)&__tools_int_test = (voidf)0xffffffffffe09e33;
    *(voidf*)&__tunnel_shutdown = (voidf)0xffffffffffe03a64;
    *(voidf*)&__tunnel_reboot = (voidf)0xffffffffffe03a0d;
    *(voidf*)&push = (voidf)0xffffffffffe03a9c;
    *(voidf*)&pop = (voidf)0xffffffffffe03aae;
    *(voidf*)&__uni_create = (voidf)0xffffffffffe1091b;
    *(voidf*)&__uni_delete = (voidf)0xffffffffffe10e5a;
    *(voidf*)&__uni_find = (voidf)0xffffffffffe10f49;
    *(voidf*)&floorf = (voidf)0xffffffffffe0986a;
    *(voidf*)&floord = (voidf)0xffffffffffe0988d;
    *(voidf*)&floorl = (voidf)0xffffffffffe098af;
    *(voidf*)&__floattixf = (voidf)0xffffffffffe11dd8;
    *(voidf*)&__fixxfti = (voidf)0xffffffffffe11df9;
    *(voidf*)&__hlt = (voidf)0xffffffffffe09e24;
    *(voidf*)&__read_error_code = (voidf)0xffffffffffe09e25;
    *(voidf*)&__get_stack = (voidf)0xffffffffffe09e2a;
}